=================================================================
Alunos: Sidarta Lins, Marcelo Adriano, Ramoses Dantas. (Equipe 1)

Projeto: Parte 1.1
Disciplina: Compiladores
Professor: Gustavo Carvalho
Linguagem: C
Data: 
=================================================================

Gramática Léxica:

letter -> [a-z]|[A-Z]

digit -> [0-9]

Number -> ( digit { digit } ) 

ID -> letter (letter | digit)*

Type -> int | boolean |

Op_Ar -> + | -

Op_Mul -> * | /

Op_Bool -> == | < | > | <= | >= | !=

Boolean -> TRUE | FALSE

token ->	ID | Op_Ar | Op_Mul | Op_Bool | Number 
			|Boolean | ( | ) | { | } 
			| = | , | ; | if | else | while | void 
			| break | continue | return | printf 
			| main | int | return

OBS: o símbolo usado para determinar um comentário de linha $


______________________________________________________________________________

Gramática Sintática:
**** TODOS OS TOKENS DEVEM ESTAR ENTRE ASPAS DUPLAS!

Program ::= Declaration+ "EoF"

Declaration ::= (varDeclaration ";") | funDeclaration 

varDeclaration ::= "Type" "Indentifier" ("," "Indentifier")*

funDeclaration ::=
	("void" | "Type" ) Indentifier "(" parameterList?	")" 
	"{" statement+ "}"

statement ::=  selectionStmt 
			| iterationStmt 
			| ID ("=" expression | "("argms?")") ";"
			| localDeclarationsStmt
			| returnStmt 
			| breakStmt
			| continueStmt
			| printf "(" expression ")"";"
			
parameterList ::= "Type" "ID" (,"Type" "ID" )*

localDeclarationsStmt ::= varDeclaration ";"

selectionStmt ::= "if" "(" expression ")" "{"statement+"}" ( else "{"statement+"}")? 

iterationStmt ::= "while" "(" expression ")" "{" statement+ "}"

returnStmt ::= "return" (";" | expression ";") 

breakStmt ::= "break" ;

continueStmt ::= "continue";

argms::= expression ("," expression)*

expression ::= simple_expression ( ( Op_Bool ) simple_expression )?

simple_expression ::= term (Op_Ar term)*

term ::= factor (Op_Mul factor)* 

factor ::= number | TRUE | FALSE | (expression) | ID ("("argms?")")?
